#!/usr/bin/env python
# coding: utf-8

from collections import Counter
from functools import lru_cache

inp = open("inp/input_14.txt").read()
polymer, instructions = inp.split('\n\n')
instructions = instructions.split('\n')
instructions = dict(line.split(' -> ') for line in instructions)

## Part 1

def polymerization(polymer, instructions, nsteps):
    for _ in range(nsteps):
        new_polymer = [polymer[0]]
        for i in range(len(polymer) - 1):
            pair = polymer[i:i+2]
            insert = instructions[pair] + pair[1]
            new_polymer += insert
        polymer = ''.join(new_polymer)
    return polymer

res = polymerization(polymer, instructions, 10)
freq = Counter(list(res))
freq = freq.most_common()

res1 = freq[0][1] - freq[-1][1]
print('Result for part 1: ', res1)  # 3009


## Part 2 --> recursion with cache

@lru_cache(maxsize = None)
def polymer_recursion(a, b, steps):
    if steps == 0:
        return Counter('')
    pair = a + b
    c = instructions[pair]
    return Counter(c) + polymer_recursion(a, c, steps - 1) + polymer_recursion(c, b, steps - 1)

# call function for each pair in the input polymer
suma = Counter(polymer)
for i in range(len(polymer)-1):
    a = polymer[i]
    b = polymer[i+1]
    suma += polymer_recursion(a, b, 40)
freq = suma.most_common()

res2 = freq[0][1] - freq[-1][1]
print('Result for part 2: ', res2)  # 3459822539451
